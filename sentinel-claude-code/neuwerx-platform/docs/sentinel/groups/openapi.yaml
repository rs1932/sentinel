openapi: 3.0.3
info:
  title: Sentinel Groups API
  version: 1.0.0
  description: OpenAPI subset for Group Management endpoints
servers:
  - url: http://localhost:8000/api/v1
paths:
  /groups/:
    get:
      summary: List groups
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: is_active
          schema: { type: boolean }
        - in: query
          name: parent_group_id
          schema: { type: string, format: uuid }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: skip
          schema: { type: integer, minimum: 0, default: 0 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
        - in: query
          name: sort_by
          schema: { type: string, default: name }
        - in: query
          name: sort_order
          schema: { type: string, enum: [asc, desc], default: asc }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResponse'
    post:
      summary: Create a group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
  /groups/{group_id}:
    get:
      summary: Get group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
    patch:
      summary: Update group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
    delete:
      summary: Delete (soft) group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: No Content
  /groups/{group_id}/users:
    get:
      summary: List group members (user IDs)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { type: string, format: uuid }
    post:
      summary: Add users to group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_ids:
                  type: array
                  items: { type: string, format: uuid }
              required: [user_ids]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  added: { type: integer }
  /groups/{group_id}/users/{user_id}:
    delete:
      summary: Remove user from group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
        - in: path
          name: user_id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: No Content
  /groups/{group_id}/roles:
    get:
      summary: List group roles (role IDs)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { type: string, format: uuid }
    post:
      summary: Assign roles to group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role_ids:
                  type: array
                  items: { type: string, format: uuid }
              required: [role_ids]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  assigned: { type: integer }
  /groups/{group_id}/roles/{role_id}:
    delete:
      summary: Remove role from group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema: { type: string, format: uuid }
        - in: path
          name: role_id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: No Content

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Group:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenant_id: { type: string, format: uuid }
        name: { type: string }
        display_name: { type: string, nullable: true }
        description: { type: string, nullable: true }
        parent_group_id: { type: string, format: uuid, nullable: true }
        metadata: { type: object, additionalProperties: true }
        is_active: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      required: [id, tenant_id, name, metadata, is_active, created_at, updated_at]
    GroupListResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Group' }
        total: { type: integer }
        skip: { type: integer }
        limit: { type: integer }
      required: [items, total, skip, limit]
    GroupCreate:
      type: object
      properties:
        name: { type: string }
        display_name: { type: string }
        description: { type: string }
        parent_group_id: { type: string, format: uuid }
        metadata: { type: object, additionalProperties: true }
        is_active: { type: boolean }
      required: [name]
    GroupUpdate:
      type: object
      properties:
        display_name: { type: string }
        description: { type: string }
        parent_group_id: { type: string, format: uuid }
        metadata: { type: object, additionalProperties: true }
        is_active: { type: boolean }
    GroupResponse:
      allOf:
        - $ref: '#/components/schemas/Group'

