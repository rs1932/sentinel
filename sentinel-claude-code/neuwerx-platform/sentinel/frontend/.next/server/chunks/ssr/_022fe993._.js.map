{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/lib/providers/QueryProvider.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const QueryProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call QueryProvider() from the server but QueryProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/lib/providers/QueryProvider.tsx <module evaluation>\",\n    \"QueryProvider\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,qEACA","debugId":null}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/lib/providers/QueryProvider.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const QueryProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call QueryProvider() from the server but QueryProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/lib/providers/QueryProvider.tsx\",\n    \"QueryProvider\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,iDACA","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/auth/AuthGuard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AuthGuard = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthGuard() from the server but AuthGuard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/auth/AuthGuard.tsx <module evaluation>\",\n    \"AuthGuard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,mEACA","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/auth/AuthGuard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AuthGuard = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthGuard() from the server but AuthGuard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/auth/AuthGuard.tsx\",\n    \"AuthGuard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,+CACA","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/layout/AppHeader.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AppHeader = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppHeader() from the server but AppHeader is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/AppHeader.tsx <module evaluation>\",\n    \"AppHeader\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,qEACA","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/layout/AppHeader.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AppHeader = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppHeader() from the server but AppHeader is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/AppHeader.tsx\",\n    \"AppHeader\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,iDACA","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/layout/Sidebar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Sidebar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Sidebar() from the server but Sidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/Sidebar.tsx <module evaluation>\",\n    \"Sidebar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,mEACA","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/layout/Sidebar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Sidebar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Sidebar() from the server but Sidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/Sidebar.tsx\",\n    \"Sidebar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,+CACA","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/layout/MainLayout.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const MainLayout = registerClientReference(\n    function() { throw new Error(\"Attempted to call MainLayout() from the server but MainLayout is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/MainLayout.tsx <module evaluation>\",\n    \"MainLayout\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,sEACA","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/layout/MainLayout.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const MainLayout = registerClientReference(\n    function() { throw new Error(\"Attempted to call MainLayout() from the server but MainLayout is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/MainLayout.tsx\",\n    \"MainLayout\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,kDACA","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/layout/index.ts"],"sourcesContent":["export { AppHeader } from './AppHeader';\nexport { Sidebar } from './Sidebar';\nexport { MainLayout } from './MainLayout';"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/terminology/TerminologyProvider.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TerminologyProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call TerminologyProvider() from the server but TerminologyProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyProvider.tsx <module evaluation>\",\n    \"TerminologyProvider\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/terminology/TerminologyProvider.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyProvider.tsx <module evaluation>\",\n    \"default\",\n);\nexport const useT = registerClientReference(\n    function() { throw new Error(\"Attempted to call useT() from the server but useT is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyProvider.tsx <module evaluation>\",\n    \"useT\",\n);\nexport const useTerminologyContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call useTerminologyContext() from the server but useTerminologyContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyProvider.tsx <module evaluation>\",\n    \"useTerminologyContext\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,oFACA;uCAEW,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsT,GACnV,oFACA;AAEG,MAAM,OAAO,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,oFACA;AAEG,MAAM,wBAAwB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACvD;IAAa,MAAM,IAAI,MAAM;AAA0P,GACvR,oFACA","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/terminology/TerminologyProvider.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TerminologyProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call TerminologyProvider() from the server but TerminologyProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyProvider.tsx\",\n    \"TerminologyProvider\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/terminology/TerminologyProvider.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyProvider.tsx\",\n    \"default\",\n);\nexport const useT = registerClientReference(\n    function() { throw new Error(\"Attempted to call useT() from the server but useT is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyProvider.tsx\",\n    \"useT\",\n);\nexport const useTerminologyContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call useTerminologyContext() from the server but useTerminologyContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyProvider.tsx\",\n    \"useTerminologyContext\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,gEACA;uCAEW,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA;AAEG,MAAM,OAAO,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,gEACA;AAEG,MAAM,wBAAwB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACvD;IAAa,MAAM,IAAI,MAAM;AAA0P,GACvR,gEACA","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/terminology/TerminologyWrapper.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TerminologyWrapper = registerClientReference(\n    function() { throw new Error(\"Attempted to call TerminologyWrapper() from the server but TerminologyWrapper is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyWrapper.tsx <module evaluation>\",\n    \"TerminologyWrapper\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/terminology/TerminologyWrapper.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyWrapper.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,qBAAqB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,mFACA;uCAEW,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqT,GAClV,mFACA","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/terminology/TerminologyWrapper.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TerminologyWrapper = registerClientReference(\n    function() { throw new Error(\"Attempted to call TerminologyWrapper() from the server but TerminologyWrapper is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyWrapper.tsx\",\n    \"TerminologyWrapper\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/terminology/TerminologyWrapper.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyWrapper.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,qBAAqB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,+DACA;uCAEW,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/terminology/TerminologyDemo.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TerminologyDemo = registerClientReference(\n    function() { throw new Error(\"Attempted to call TerminologyDemo() from the server but TerminologyDemo is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyDemo.tsx <module evaluation>\",\n    \"TerminologyDemo\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/terminology/TerminologyDemo.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyDemo.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,kBAAkB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,gFACA;uCAEW,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkT,GAC/U,gFACA","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/terminology/TerminologyDemo.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TerminologyDemo = registerClientReference(\n    function() { throw new Error(\"Attempted to call TerminologyDemo() from the server but TerminologyDemo is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyDemo.tsx\",\n    \"TerminologyDemo\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/terminology/TerminologyDemo.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/terminology/TerminologyDemo.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,kBAAkB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,4DACA;uCAEW,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/hooks/useTerminology.ts/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const useTerminology = registerClientReference(\n    function() { throw new Error(\"Attempted to call useTerminology() from the server but useTerminology is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/hooks/useTerminology.ts <module evaluation>\",\n    \"useTerminology\",\n);\nexport const useTranslation = registerClientReference(\n    function() { throw new Error(\"Attempted to call useTranslation() from the server but useTranslation is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/hooks/useTerminology.ts <module evaluation>\",\n    \"useTranslation\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,6DACA;AAEG,MAAM,iBAAiB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,6DACA","debugId":null}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/hooks/useTerminology.ts/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const useTerminology = registerClientReference(\n    function() { throw new Error(\"Attempted to call useTerminology() from the server but useTerminology is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/hooks/useTerminology.ts\",\n    \"useTerminology\",\n);\nexport const useTranslation = registerClientReference(\n    function() { throw new Error(\"Attempted to call useTranslation() from the server but useTranslation is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/hooks/useTerminology.ts\",\n    \"useTranslation\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,yCACA;AAEG,MAAM,iBAAiB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,yCACA","debugId":null}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/constants/index.ts"],"sourcesContent":["// API Configuration\nexport const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000';\nexport const API_VERSION = 'v1';\nexport const API_PREFIX = `/api/${API_VERSION}/sentinel`;\n\n// Authentication\nexport const TOKEN_STORAGE_KEY = 'sentinel_auth_tokens';\nexport const USER_STORAGE_KEY = 'sentinel_user';\n\n// App Configuration\nexport const APP_NAME = 'Sentinel';\nexport const APP_DESCRIPTION = 'Multi-tenant User Management Platform';\n\n// Role-based access\nexport const ROLE_PERMISSIONS = {\n  super_admin: {\n    canManageTenants: true,\n    canManageUsers: true,\n    canManageRoles: true,\n    canViewAllData: true,\n  },\n  tenant_admin: {\n    canManageTenants: false,\n    canManageUsers: true,\n    canManageRoles: true,\n    canViewAllData: false,\n  },\n  user: {\n    canManageTenants: false,\n    canManageUsers: false,\n    canManageRoles: false,\n    canViewAllData: false,\n  },\n} as const;\n\n// Navigation routes\nexport const ROUTES = {\n  HOME: '/',\n  LOGIN: '/auth/login',\n  DASHBOARD: '/dashboard',\n  PROFILE: '/profile', \n  USERS: '/users',\n  TENANTS: '/tenants',\n  ROLES: '/roles',\n  GROUPS: '/groups',\n  PERMISSIONS: '/permissions',\n  RESOURCES: '/resources',\n  SETTINGS: '/settings',\n} as const;\n\n// Theme colors (Material Design inspired)\nexport const THEME_COLORS = {\n  primary: 'hsl(221, 83%, 53%)',\n  secondary: 'hsl(210, 40%, 98%)',\n  accent: 'hsl(142, 76%, 36%)',\n  destructive: 'hsl(0, 84%, 60%)',\n  muted: 'hsl(210, 40%, 96%)',\n  border: 'hsl(214, 32%, 91%)',\n  input: 'hsl(214, 32%, 91%)',\n  ring: 'hsl(221, 83%, 53%)',\n} as const;"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;;;;;;;;AACb,MAAM,eAAe,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAC7D,MAAM,cAAc;AACpB,MAAM,aAAa,CAAC,KAAK,EAAE,YAAY,SAAS,CAAC;AAGjD,MAAM,oBAAoB;AAC1B,MAAM,mBAAmB;AAGzB,MAAM,WAAW;AACjB,MAAM,kBAAkB;AAGxB,MAAM,mBAAmB;IAC9B,aAAa;QACX,kBAAkB;QAClB,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;IAClB;IACA,cAAc;QACZ,kBAAkB;QAClB,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;IAClB;IACA,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;IAClB;AACF;AAGO,MAAM,SAAS;IACpB,MAAM;IACN,OAAO;IACP,WAAW;IACX,SAAS;IACT,OAAO;IACP,SAAS;IACT,OAAO;IACP,QAAQ;IACR,aAAa;IACb,WAAW;IACX,UAAU;AACZ;AAGO,MAAM,eAAe;IAC1B,SAAS;IACT,WAAW;IACX,QAAQ;IACR,aAAa;IACb,OAAO;IACP,QAAQ;IACR,OAAO;IACP,MAAM;AACR","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/lib/api/client.ts"],"sourcesContent":["import { API_BASE_URL, API_PREFIX } from '@/constants';\n\nexport interface ApiResponse<T = any> {\n  data: T;\n  message?: string;\n  status: string;\n}\n\nexport interface ApiError {\n  message: string;\n  status: number;\n  errors?: Record<string, string[]>;\n}\n\nclass ApiClient {\n  private baseUrl: string;\n  private token: string | null = null;\n\n  constructor() {\n    this.baseUrl = `${API_BASE_URL}${API_PREFIX}`;\n  }\n\n  setToken(token: string | null) {\n    this.token = token;\n  }\n\n  private async request<T = any>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    };\n\n    if (this.token) {\n      headers.Authorization = `Bearer ${this.token}`;\n    }\n\n    const config: RequestInit = {\n      ...options,\n      headers,\n    };\n\n    try {\n      console.log('API Request:', { url, method: config.method, headers }); // Debug log\n      \n      const response = await fetch(url, config);\n      \n      console.log('API Response status:', response.status); // Debug log\n      \n      if (!response.ok) {\n        const error: ApiError = {\n          message: response.statusText || 'An error occurred',\n          status: response.status,\n        };\n        \n        try {\n          const errorData = await response.json();\n          console.log('API Error data (raw):', errorData); // Debug log\n          console.log('Error data type:', typeof errorData); // Debug log\n          console.log('Error data keys:', Object.keys(errorData || {})); // Debug log\n          \n          // Handle different error formats:\n          // 1. Documented format: { error, error_description, error_code }\n          // 2. FastAPI default: { detail }\n          // 3. Generic format: { message }\n          error.message = errorData.error_description || errorData.detail || errorData.message || error.message;\n          error.errors = errorData.errors || errorData.details;\n          // Store additional error information\n          (error as any).errorType = errorData.error || 'unknown_error';\n          (error as any).errorCode = errorData.error_code;\n          (error as any).retryAfter = errorData.retry_after;\n        } catch (parseError) {\n          // If we can't parse JSON, use the default message\n          console.log('Failed to parse error JSON:', parseError);\n          console.log('Response status:', response.status);\n          console.log('Response statusText:', response.statusText);\n        }\n        \n        throw error;\n      }\n\n      // Handle responses with no content (like 204 No Content)\n      if (response.status === 204 || response.headers.get('content-length') === '0') {\n        console.log('API Response: No content (204)'); // Debug log\n        return null;\n      }\n\n      const data = await response.json();\n      console.log('API Response data:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.log('API Request failed:', error); // Debug log\n      \n      if (error instanceof TypeError) {\n        // Network error\n        throw {\n          message: 'Network error. Please check your connection.',\n          status: 0,\n        } as ApiError;\n      }\n      throw error;\n    }\n  }\n\n  // Auth endpoints\n  auth = {\n    login: (credentials: { email: string; password: string; tenant_code: string }) => {\n      // Use JSON format as per actual backend implementation\n      const payload = {\n        email: credentials.email,\n        password: credentials.password,\n        tenant_code: credentials.tenant_code,\n      };\n      \n      return this.request('/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(payload),\n      });\n    },\n\n    refresh: (refreshToken: string) =>\n      this.request('/auth/refresh', {\n        method: 'POST',\n        body: JSON.stringify({ refresh_token: refreshToken }),\n      }),\n\n    logout: () =>\n      this.request('/auth/logout', {\n        method: 'POST',\n      }),\n\n    validate: () => this.request('/auth/validate'),\n  };\n\n  // Users endpoints\n  users = {\n    me: () => this.request('/users/me'),\n\n    list: (params?: { \n      page?: number; \n      limit?: number; \n      search?: string; \n      is_active?: boolean;\n      sort?: string;\n      order?: 'asc' | 'desc';\n      tenant_id?: string;\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params?.page) searchParams.set('page', params.page.toString());\n      if (params?.limit) searchParams.set('limit', params.limit.toString());\n      if (params?.search) searchParams.set('search', params.search);\n      if (params?.is_active !== undefined) searchParams.set('is_active', params.is_active.toString());\n      if (params?.sort) searchParams.set('sort', params.sort);\n      if (params?.order) searchParams.set('order', params.order);\n      if (params?.tenant_id) searchParams.set('tenant_id', params.tenant_id);\n      \n      const query = searchParams.toString();\n      return this.request(`/users${query ? `?${query}` : ''}`);\n    },\n\n    get: (id: string) => this.request(`/users/${id}`),\n\n    create: (userData: any) =>\n      this.request('/users', {\n        method: 'POST',\n        body: JSON.stringify(userData),\n      }),\n\n    update: (id: string, userData: any) =>\n      this.request(`/users/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(userData),\n      }),\n\n    delete: (id: string, hard: boolean = false) =>\n      this.request(`/users/${id}${hard ? '?hard_delete=true' : ''}`, {\n        method: 'DELETE',\n      }),\n\n    updateAvatar: (id: string, avatarFile: File) => {\n      const formData = new FormData();\n      formData.append('avatar', avatarFile);\n      \n      return this.request(`/users/${id}/avatar`, {\n        method: 'POST',\n        body: formData,\n        headers: {}, // Don't set Content-Type, let browser set it with boundary\n      });\n    },\n\n    // Bulk operations\n    bulk: (action: string, userIds: string[]) => {\n      const endpoint = action === 'delete' ? '/users/bulk' : `/users/bulk/${action}`;\n      return this.request(endpoint, {\n        method: action === 'delete' ? 'DELETE' : 'POST',\n        body: JSON.stringify({ user_ids: userIds }),\n      });\n    },\n\n    // Admin password reset\n    adminResetPassword: (id: string, newPassword: string) =>\n      this.request(`/users/${id}/admin-reset-password`, {\n        method: 'POST',\n        body: JSON.stringify({ new_password: newPassword }),\n      }),\n  };\n\n  // Tenants endpoints\n  tenants = {\n    list: (params?: {\n      name?: string;\n      code?: string;\n      type?: 'root' | 'sub_tenant';\n      parent_tenant_id?: string;\n      is_active?: boolean;\n      limit?: number;\n      offset?: number;\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n          if (value !== undefined && value !== null) {\n            searchParams.set(key, value.toString());\n          }\n        });\n      }\n      const query = searchParams.toString();\n      return this.request(`/tenants${query ? `?${query}` : ''}`);\n    },\n\n    get: (id: string) => this.request(`/tenants/${id}`),\n\n    getByCode: (code: string) => this.request(`/tenants/code/${code}`),\n\n    create: (tenantData: {\n      name: string;\n      code: string;\n      type?: 'root' | 'sub_tenant';\n      parent_tenant_id?: string;\n      isolation_mode?: 'shared' | 'dedicated';\n      settings?: Record<string, any>;\n      features?: string[];\n      metadata?: Record<string, any>;\n    }) =>\n      this.request('/tenants', {\n        method: 'POST',\n        body: JSON.stringify(tenantData),\n      }),\n\n    update: (id: string, tenantData: {\n      name?: string;\n      settings?: Record<string, any>;\n      features?: string[];\n      metadata?: Record<string, any>;\n      is_active?: boolean;\n    }) =>\n      this.request(`/tenants/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(tenantData),\n      }),\n\n    delete: (id: string) =>\n      this.request(`/tenants/${id}`, {\n        method: 'DELETE',\n      }),\n\n    // Sub-tenant operations\n    createSubTenant: (parentId: string, tenantData: {\n      name: string;\n      code: string;\n      isolation_mode?: 'shared' | 'dedicated';\n      settings?: Record<string, any>;\n      features?: string[];\n      metadata?: Record<string, any>;\n    }) =>\n      this.request(`/tenants/${parentId}/sub-tenants`, {\n        method: 'POST',\n        body: JSON.stringify(tenantData),\n      }),\n\n    // Hierarchy operations\n    getHierarchy: (id: string) => this.request(`/tenants/${id}/hierarchy`),\n\n    // Activation operations\n    activate: (id: string) =>\n      this.request(`/tenants/${id}/activate`, {\n        method: 'POST',\n      }),\n\n    deactivate: (id: string) =>\n      this.request(`/tenants/${id}/deactivate`, {\n        method: 'POST',\n      }),\n  };\n\n  // Roles endpoints\n  roles = {\n    list: (params?: {\n      skip?: number;\n      limit?: number;\n      search?: string;\n      is_active?: boolean;\n      type?: 'system' | 'custom';\n      sort_by?: string;\n      sort_order?: 'asc' | 'desc';\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n          if (value !== undefined && value !== null) {\n            searchParams.set(key, value.toString());\n          }\n        });\n      }\n      const query = searchParams.toString();\n      return this.request(`/roles${query ? `?${query}` : ''}`);\n    },\n\n    get: (id: string) => this.request(`/roles/${id}`),\n\n    create: (roleData: any) =>\n      this.request('/roles', {\n        method: 'POST',\n        body: JSON.stringify(roleData),\n      }),\n\n    update: (id: string, roleData: any) =>\n      this.request(`/roles/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(roleData),\n      }),\n\n    delete: (id: string) =>\n      this.request(`/roles/${id}`, {\n        method: 'DELETE',\n      }),\n\n    assignToUser: (roleId: string, userId: string) =>\n      this.request(`/roles/${roleId}/users/${userId}`, {\n        method: 'POST',\n      }),\n\n    removeFromUser: (roleId: string, userId: string) =>\n      this.request(`/roles/${roleId}/users/${userId}`, {\n        method: 'DELETE',\n      }),\n  };\n\n  // Service Accounts endpoints\n  serviceAccounts = {\n    list: () => this.request('/service-accounts'),\n\n    get: (id: string) => this.request(`/service-accounts/${id}`),\n\n    create: (serviceAccountData: any) =>\n      this.request('/service-accounts', {\n        method: 'POST',\n        body: JSON.stringify(serviceAccountData),\n      }),\n\n    update: (id: string, serviceAccountData: any) =>\n      this.request(`/service-accounts/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(serviceAccountData),\n      }),\n\n    delete: (id: string) =>\n      this.request(`/service-accounts/${id}`, {\n        method: 'DELETE',\n      }),\n\n    regenerateSecret: (id: string) =>\n      this.request(`/service-accounts/${id}/regenerate-secret`, {\n        method: 'POST',\n      }),\n  };\n\n  // Groups endpoints\n  groups = {\n    list: (params?: {\n      is_active?: boolean;\n      parent_group_id?: string;\n      search?: string;\n      skip?: number;\n      limit?: number;\n      sort_by?: string;\n      sort_order?: 'asc' | 'desc';\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n          if (value !== undefined && value !== null) {\n            searchParams.set(key, value.toString());\n          }\n        });\n      }\n      const query = searchParams.toString();\n      return this.request(`/groups${query ? `?${query}` : ''}`);\n    },\n\n    get: (id: string) => this.request(`/groups/${id}`),\n\n    create: (groupData: any) =>\n      this.request('/groups', {\n        method: 'POST',\n        body: JSON.stringify(groupData),\n      }),\n\n    update: (id: string, groupData: any) =>\n      this.request(`/groups/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(groupData),\n      }),\n\n    delete: (id: string) =>\n      this.request(`/groups/${id}`, {\n        method: 'DELETE',\n      }),\n\n    // Member management\n    addUsers: (groupId: string, userIds: string[]) =>\n      this.request(`/groups/${groupId}/users`, {\n        method: 'POST',\n        body: JSON.stringify({ user_ids: userIds }),\n      }),\n\n    removeUser: (groupId: string, userId: string) =>\n      this.request(`/groups/${groupId}/users/${userId}`, {\n        method: 'DELETE',\n      }),\n\n    listMembers: (groupId: string) =>\n      this.request(`/groups/${groupId}/users`),\n\n    // Role management\n    assignRoles: (groupId: string, roleIds: string[]) =>\n      this.request(`/groups/${groupId}/roles`, {\n        method: 'POST',\n        body: JSON.stringify({ role_ids: roleIds }),\n      }),\n\n    removeRole: (groupId: string, roleId: string) =>\n      this.request(`/groups/${groupId}/roles/${roleId}`, {\n        method: 'DELETE',\n      }),\n\n    listRoles: (groupId: string) =>\n      this.request(`/groups/${groupId}/roles`),\n  };\n\n  // Permissions endpoints\n  permissions = {\n    list: (params?: {\n      resource_type?: string;\n      is_active?: boolean;\n      search?: string;\n      skip?: number;\n      limit?: number;\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n          if (value !== undefined && value !== null) {\n            searchParams.set(key, value.toString());\n          }\n        });\n      }\n      const query = searchParams.toString();\n      return this.request(`/permissions/${query ? `?${query}` : ''}`);\n    },\n\n    get: (id: string) => this.request(`/permissions/${id}`),\n\n    create: (permissionData: any) =>\n      this.request('/permissions/', {\n        method: 'POST',\n        body: JSON.stringify(permissionData),\n      }),\n\n    update: (id: string, permissionData: any) =>\n      this.request(`/permissions/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(permissionData),\n      }),\n\n    delete: (id: string) =>\n      this.request(`/permissions/${id}`, {\n        method: 'DELETE',\n      }),\n\n    // Role-permission management (these are under roles API)\n    assignToRole: (roleId: string, assignments: any[]) =>\n      this.request(`/roles/${roleId}/permissions/`, {\n        method: 'POST',\n        body: JSON.stringify({ permissions: assignments }),\n      }),\n\n    listByRole: (roleId: string, includeInherited: boolean = true) => {\n      const params = new URLSearchParams();\n      if (!includeInherited) params.set('include_inherited', 'false');\n      const query = params.toString();\n      return this.request(`/roles/${roleId}/permissions/${query ? `?${query}` : ''}`);\n    },\n\n    removeFromRole: (roleId: string, permissionId: string) =>\n      this.request(`/roles/${roleId}/permissions/${permissionId}`, {\n        method: 'DELETE',\n      }),\n  };\n\n  // Resources endpoints\n  resources = {\n    list: (params?: {\n      type?: string;\n      parent_id?: string;\n      is_active?: boolean;\n      search?: string;\n      page?: number;\n      limit?: number;\n      sort_by?: string;\n      sort_order?: 'asc' | 'desc';\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n          if (value !== undefined && value !== null) {\n            searchParams.set(key, value.toString());\n          }\n        });\n      }\n      const query = searchParams.toString();\n      return this.request(`/resources${query ? `?${query}` : ''}`);\n    },\n\n    get: (id: string) => this.request(`/resources/${id}`),\n\n    getTree: (params?: {\n      root_id?: string;\n      max_depth?: number;\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n          if (value !== undefined && value !== null) {\n            searchParams.set(key, value.toString());\n          }\n        });\n      }\n      const query = searchParams.toString();\n      return this.request(`/resources/tree${query ? `?${query}` : ''}`);\n    },\n\n    getStatistics: () => this.request('/resources/statistics'),\n\n    create: (resourceData: any) =>\n      this.request('/resources', {\n        method: 'POST',\n        body: JSON.stringify(resourceData),\n      }),\n\n    update: (id: string, resourceData: any) =>\n      this.request(`/resources/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(resourceData),\n      }),\n\n    delete: (id: string, cascade: boolean = false) =>\n      this.request(`/resources/${id}${cascade ? '?cascade=true' : ''}`, {\n        method: 'DELETE',\n      }),\n\n    move: (id: string, moveData: { new_parent_id: string | null }) =>\n      this.request(`/resources/${id}/move`, {\n        method: 'POST',\n        body: JSON.stringify(moveData),\n      }),\n\n    getPermissions: (id: string) => this.request(`/resources/${id}/permissions`),\n\n    getChildren: (id: string, params?: {\n      is_active?: boolean;\n      page?: number;\n      limit?: number;\n    }) => {\n      const searchParams = new URLSearchParams();\n      if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n          if (value !== undefined && value !== null) {\n            searchParams.set(key, value.toString());\n          }\n        });\n      }\n      const query = searchParams.toString();\n      return this.request(`/resources/${id}/children${query ? `?${query}` : ''}`);\n    },\n  };\n\n  // Terminology endpoints\n  terminology = {\n    get: (tenantId: string) => \n      this.request(`/terminology/tenants/${tenantId}`),\n\n    update: (tenantId: string, data: {\n      terminology: Record<string, string>;\n      inherit_parent?: boolean;\n      apply_to_children?: boolean;\n      template_name?: string;\n      metadata?: Record<string, any>;\n    }) =>\n      this.request(`/terminology/tenants/${tenantId}`, {\n        method: 'PUT',\n        body: JSON.stringify(data),\n      }),\n\n    reset: (tenantId: string) =>\n      this.request(`/terminology/tenants/${tenantId}/reset`, {\n        method: 'POST',\n      }),\n\n    applyToChildren: (tenantId: string, data: {\n      terminology?: Record<string, string>;\n      recursive?: boolean;\n    }) =>\n      this.request(`/terminology/tenants/${tenantId}/apply-to-children`, {\n        method: 'POST',\n        body: JSON.stringify(data),\n      }),\n\n    validate: (data: { terminology: Record<string, string> }) =>\n      this.request('/terminology/validate', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      }),\n\n    getDefaults: () =>\n      this.request('/terminology/defaults'),\n\n    getIndustryTemplates: () =>\n      this.request('/terminology/templates'),\n\n    applyTemplate: (tenantId: string, data: {\n      template_name: string;\n      customizations?: Record<string, string>;\n    }) =>\n      this.request(`/terminology/tenants/${tenantId}/apply-template`, {\n        method: 'POST',\n        body: JSON.stringify(data),\n      }),\n  };\n}\n\nexport const apiClient = new ApiClient();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 864, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/lib/terminology-service.ts"],"sourcesContent":["import { apiClient } from './api/client';\nimport type { TerminologyConfig, UpdateTerminologyRequest, TerminologyValidation } from '@/types';\n\n/**\n * Frontend Terminology Service\n * \n * Provides dynamic terminology mapping for Sentinel admin interfaces.\n * Fetches tenant-specific terminology from the backend and enables\n * real-time label replacement throughout the UI.\n * \n * Features:\n * - Tenant-aware terminology loading\n * - In-memory caching with selective invalidation\n * - Fallback to default terminology\n * - Real-time terminology updates\n * - Industry template support\n */\nexport class TerminologyService {\n  private cache = new Map<string, TerminologyConfig>();\n  private listeners = new Set<(terminology: Record<string, string>) => void>();\n  private currentTenantId: string | null = null;\n  private currentTerminology: Record<string, string> = {};\n\n  /**\n   * Initialize the terminology service for a specific tenant\n   */\n  async initialize(tenantId: string): Promise<void> {\n    this.currentTenantId = tenantId;\n    \n    try {\n      const config = await this.getTerminology(tenantId);\n      this.currentTerminology = config.terminology;\n      this.notifyListeners(config.terminology);\n    } catch (error) {\n      console.warn('Failed to load terminology, using defaults:', error);\n      this.currentTerminology = this.getDefaultTerminology();\n      this.notifyListeners(this.currentTerminology);\n    }\n  }\n\n  /**\n   * Get terminology configuration for a tenant (with caching)\n   */\n  async getTerminology(tenantId: string): Promise<TerminologyConfig> {\n    // Check cache first\n    if (this.cache.has(tenantId)) {\n      return this.cache.get(tenantId)!;\n    }\n\n    try {\n      const config = await apiClient.terminology.get(tenantId);\n      \n      // Cache the result\n      this.cache.set(tenantId, config);\n      \n      return config;\n    } catch (error) {\n      console.error('Failed to fetch terminology:', error);\n      \n      // Return default terminology as fallback\n      const defaultConfig: TerminologyConfig = {\n        terminology: this.getDefaultTerminology(),\n        is_inherited: true,\n        local_config: {},\n        tenant_id: tenantId,\n        tenant_name: 'Unknown',\n        tenant_code: 'UNKNOWN',\n      };\n      \n      return defaultConfig;\n    }\n  }\n\n  /**\n   * Update terminology configuration for a tenant\n   */\n  async updateTerminology(\n    tenantId: string, \n    request: UpdateTerminologyRequest\n  ): Promise<TerminologyConfig> {\n    try {\n      const updatedConfig = await apiClient.terminology.update(tenantId, request);\n      \n      // Update cache\n      this.cache.set(tenantId, updatedConfig);\n      \n      // If this is the current tenant, update active terminology\n      if (tenantId === this.currentTenantId) {\n        this.currentTerminology = updatedConfig.terminology;\n        this.notifyListeners(updatedConfig.terminology);\n      }\n      \n      return updatedConfig;\n    } catch (error) {\n      console.error('Failed to update terminology:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Reset tenant terminology to inherit from parent\n   */\n  async resetTerminology(tenantId: string): Promise<TerminologyConfig> {\n    try {\n      const resetConfig = await apiClient.terminology.reset(tenantId);\n      \n      // Update cache\n      this.cache.set(tenantId, resetConfig);\n      \n      // If this is the current tenant, update active terminology\n      if (tenantId === this.currentTenantId) {\n        this.currentTerminology = resetConfig.terminology;\n        this.notifyListeners(resetConfig.terminology);\n      }\n      \n      return resetConfig;\n    } catch (error) {\n      console.error('Failed to reset terminology:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Apply terminology to child tenants\n   */\n  async applyToChildren(\n    tenantId: string,\n    options: { terminology?: Record<string, string>; recursive?: boolean } = {}\n  ): Promise<string[]> {\n    try {\n      const affectedTenants = await apiClient.terminology.applyToChildren(tenantId, options);\n      \n      // Invalidate cache for affected tenants\n      if (Array.isArray(affectedTenants)) {\n        affectedTenants.forEach(id => this.invalidateCache(id));\n      }\n      \n      return affectedTenants;\n    } catch (error) {\n      console.error('Failed to apply terminology to children:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate terminology configuration\n   */\n  async validateTerminology(terminology: Record<string, string>): Promise<TerminologyValidation> {\n    try {\n      return await apiClient.terminology.validate({ terminology });\n    } catch (error) {\n      console.error('Failed to validate terminology:', error);\n      return {\n        valid: false,\n        errors: ['Failed to validate terminology'],\n        warnings: [],\n      };\n    }\n  }\n\n  /**\n   * Get industry templates\n   */\n  async getIndustryTemplates(): Promise<Record<string, Record<string, string>>> {\n    try {\n      return await apiClient.terminology.getIndustryTemplates();\n    } catch (error) {\n      console.error('Failed to fetch industry templates:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Apply an industry template to a tenant\n   */\n  async applyTemplate(\n    tenantId: string,\n    templateName: string,\n    customizations?: Record<string, string>\n  ): Promise<TerminologyConfig> {\n    try {\n      const config = await apiClient.terminology.applyTemplate(tenantId, {\n        template_name: templateName,\n        customizations,\n      });\n      \n      // Update cache\n      this.cache.set(tenantId, config);\n      \n      // If this is the current tenant, update active terminology\n      if (tenantId === this.currentTenantId) {\n        this.currentTerminology = config.terminology;\n        this.notifyListeners(config.terminology);\n      }\n      \n      return config;\n    } catch (error) {\n      console.error('Failed to apply template:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the current active terminology (for the initialized tenant)\n   */\n  getCurrentTerminology(): Record<string, string> {\n    return { ...this.currentTerminology };\n  }\n\n  /**\n   * Translate a term using current terminology\n   */\n  translate(term: string): string {\n    return this.currentTerminology[term.toLowerCase()] || term;\n  }\n\n  /**\n   * Translate multiple terms at once\n   */\n  translateMultiple(terms: string[]): Record<string, string> {\n    const result: Record<string, string> = {};\n    terms.forEach(term => {\n      result[term] = this.translate(term);\n    });\n    return result;\n  }\n\n  /**\n   * Subscribe to terminology changes\n   */\n  subscribe(listener: (terminology: Record<string, string>) => void): () => void {\n    this.listeners.add(listener);\n    \n    // Immediately call with current terminology\n    listener(this.currentTerminology);\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  /**\n   * Invalidate cache for a specific tenant\n   */\n  invalidateCache(tenantId: string): void {\n    this.cache.delete(tenantId);\n  }\n\n  /**\n   * Clear all cached terminology\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics (for debugging)\n   */\n  getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n\n  /**\n   * Get default Sentinel terminology\n   */\n  private getDefaultTerminology(): Record<string, string> {\n    return {\n      // Basic entities\n      tenant: 'Tenant',\n      sub_tenant: 'Sub-Tenant',\n      user: 'User',\n      role: 'Role',\n      permission: 'Permission',\n      resource: 'Resource',\n      group: 'Group',\n\n      // Plural forms\n      tenants: 'Tenants',\n      sub_tenants: 'Sub-Tenants',\n      users: 'Users',\n      roles: 'Roles',\n      permissions: 'Permissions',\n      resources: 'Resources',\n      groups: 'Groups',\n\n      // Actions\n      create_tenant: 'Create Tenant',\n      create_sub_tenant: 'Create Sub-Tenant',\n      create_user: 'Create User',\n      create_role: 'Create Role',\n      create_group: 'Create Group',\n\n      // Management pages\n      tenant_management: 'Tenant Management',\n      sub_tenant_management: 'Sub-Tenant Management',\n      user_management: 'User Management',\n      role_management: 'Role Management',\n      permission_management: 'Permission Management',\n      group_management: 'Group Management',\n\n      // Dashboard and navigation\n      dashboard: 'Dashboard',\n      dashboard_title: 'Dashboard',\n      welcome_message: 'Welcome back',\n      admin_title: 'Administrator',\n\n      // Common UI labels\n      name: 'Name',\n      type: 'Type',\n      status: 'Status',\n      actions: 'Actions',\n      edit: 'Edit',\n      delete: 'Delete',\n      view: 'View',\n      add: 'Add',\n      manage: 'Manage',\n      assign: 'Assign',\n    };\n  }\n\n  /**\n   * Notify all listeners of terminology changes\n   */\n  private notifyListeners(terminology: Record<string, string>): void {\n    this.listeners.forEach(listener => {\n      try {\n        listener(terminology);\n      } catch (error) {\n        console.error('Error in terminology listener:', error);\n      }\n    });\n  }\n}\n\n// Export singleton instance\nexport const terminologyService = new TerminologyService();\n\n// Export default for convenience\nexport default terminologyService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1135, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/terminology/index.ts"],"sourcesContent":["export { \n  TerminologyProvider, \n  useTerminologyContext, \n  useT \n} from './TerminologyProvider';\n\nexport { TerminologyWrapper } from './TerminologyWrapper';\nexport { TerminologyDemo } from './TerminologyDemo';\n\n// Re-export hooks for convenience\nexport { useTerminology, useTranslation } from '@/hooks/useTerminology';\n\n// Re-export service for advanced usage\nexport { terminologyService } from '@/lib/terminology-service';"],"names":[],"mappings":";AAAA;AAMA;AACA;AAEA,kCAAkC;AAClC;AAEA,uCAAuC;AACvC","debugId":null}},
    {"offset": {"line": 1163, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/ui/toaster.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Toaster = registerClientReference(\n    function() { throw new Error(\"Attempted to call Toaster() from the server but Toaster is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/toaster.tsx <module evaluation>\",\n    \"Toaster\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,+DACA","debugId":null}},
    {"offset": {"line": 1175, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/components/ui/toaster.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Toaster = registerClientReference(\n    function() { throw new Error(\"Attempted to call Toaster() from the server but Toaster is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/toaster.tsx\",\n    \"Toaster\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,2CACA","debugId":null}},
    {"offset": {"line": 1187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1195, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/src/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport \"./globals.css\";\nimport { QueryProvider } from \"@/lib/providers/QueryProvider\";\nimport { AuthGuard } from \"@/components/auth/AuthGuard\";\nimport { MainLayout } from \"@/components/layout\";\nimport { TerminologyWrapper } from \"@/components/terminology\";\nimport { Toaster } from \"@/components/ui/toaster\";\n\nexport const metadata: Metadata = {\n  title: \"Sentinel - Multi-tenant User Management\",\n  description: \"A modern multi-tenant user management platform with role-based access control\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className=\"font-sans antialiased\">\n        <QueryProvider>\n          <AuthGuard>\n            <TerminologyWrapper>\n              <MainLayout>\n                {children}\n              </MainLayout>\n            </TerminologyWrapper>\n          </AuthGuard>\n          <Toaster />\n        </QueryProvider>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;AAEO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,8OAAC;QAAK,MAAK;kBACT,cAAA,8OAAC;YAAK,WAAU;sBACd,cAAA,8OAAC,yIAAA,CAAA,gBAAa;;kCACZ,8OAAC,uIAAA,CAAA,YAAS;kCACR,cAAA,8OAAC,uJAAA,CAAA,qBAAkB;sCACjB,cAAA,8OAAC,0IAAA,CAAA,aAAU;0CACR;;;;;;;;;;;;;;;;kCAIP,8OAAC,mIAAA,CAAA,UAAO;;;;;;;;;;;;;;;;;;;;;AAKlB","debugId":null}},
    {"offset": {"line": 1272, "column": 0}, "map": {"version":3,"sources":["file:///Users/rs/Documents/workspaces/Neuwerx%20Products/sentinel/sentinel-claude-code/neuwerx-platform/sentinel/frontend/node_modules/next/src/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-rsc']!.ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,kBAAkB","ignoreList":[0],"debugId":null}}]
}