from fastapi import APIRouter, Depends, Query, status
from typing import List, Optional
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession

from ..database import get_db
from ..services.tenant_service import TenantService
from ..core.security_utils import get_current_user, require_scopes, CurrentUser
from ..schemas.tenant import (
    TenantCreate, TenantUpdate, TenantQuery,
    TenantResponse, TenantDetailResponse, TenantListResponse,
    SubTenantCreate
)
from ..utils.exceptions import (
    NotFoundHTTPError, ConflictHTTPError, BadRequestError
)

router = APIRouter(prefix="/tenants", tags=["Tenants"])

@router.post("/", response_model=TenantResponse, status_code=status.HTTP_201_CREATED)
async def create_tenant(
    tenant_data: TenantCreate,
    current_user: CurrentUser = Depends(require_scopes("tenant:admin")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        tenant = await service.create_tenant(tenant_data)
        return TenantResponse(**tenant.to_dict())
    except Exception as e:
        raise BadRequestError(str(e))

@router.get("/", response_model=TenantListResponse)
async def list_tenants(
    name: Optional[str] = Query(None, description="Filter by tenant name"),
    code: Optional[str] = Query(None, description="Filter by tenant code"),
    type: Optional[str] = Query(None, description="Filter by tenant type"),
    parent_tenant_id: Optional[UUID] = Query(None, description="Filter by parent tenant"),
    is_active: Optional[bool] = Query(None, description="Filter by active status"),
    limit: int = Query(100, ge=1, le=1000, description="Maximum number of items to return"),
    offset: int = Query(0, ge=0, description="Number of items to skip"),
    current_user: CurrentUser = Depends(require_scopes("tenant:read")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    query = TenantQuery(
        name=name,
        code=code,
        type=type,
        parent_tenant_id=parent_tenant_id,
        is_active=is_active,
        limit=limit,
        offset=offset
    )
    return await service.list_tenants(query)

@router.get("/{tenant_id}", response_model=TenantDetailResponse)
async def get_tenant(
    tenant_id: UUID,
    current_user: CurrentUser = Depends(require_scopes("tenant:read")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        return await service.get_tenant_detail(tenant_id)
    except Exception as e:
        raise NotFoundHTTPError(str(e))

@router.get("/code/{tenant_code}", response_model=TenantResponse)
async def get_tenant_by_code(
    tenant_code: str,
    current_user: CurrentUser = Depends(require_scopes("tenant:read")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        tenant = await service.get_tenant_by_code(tenant_code)
        return TenantResponse(**tenant.to_dict())
    except Exception as e:
        raise NotFoundHTTPError(str(e))

@router.patch("/{tenant_id}", response_model=TenantResponse)
async def update_tenant(
    tenant_id: UUID,
    update_data: TenantUpdate,
    current_user: CurrentUser = Depends(require_scopes("tenant:write")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        tenant = await service.update_tenant(tenant_id, update_data)
        return TenantResponse(**tenant.to_dict())
    except Exception as e:
        raise BadRequestError(str(e))

@router.delete("/{tenant_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_tenant(
    tenant_id: UUID,
    current_user: CurrentUser = Depends(require_scopes("tenant:admin")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        await service.delete_tenant(tenant_id)
        return None
    except Exception as e:
        raise BadRequestError(str(e))

@router.post("/{parent_tenant_id}/sub-tenants", response_model=TenantResponse, status_code=status.HTTP_201_CREATED)
async def create_sub_tenant(
    parent_tenant_id: UUID,
    sub_tenant_data: SubTenantCreate,
    current_user: CurrentUser = Depends(require_scopes("tenant:admin")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        tenant = await service.create_sub_tenant(parent_tenant_id, sub_tenant_data)
        return TenantResponse(**tenant.to_dict())
    except Exception as e:
        raise BadRequestError(str(e))

@router.get("/{tenant_id}/hierarchy", response_model=List[TenantResponse])
async def get_tenant_hierarchy(
    tenant_id: UUID,
    current_user: CurrentUser = Depends(require_scopes("tenant:read")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        hierarchy = await service.get_tenant_hierarchy(tenant_id)
        return [TenantResponse(**t.to_dict()) for t in hierarchy]
    except Exception as e:
        raise NotFoundHTTPError(str(e))

@router.post("/{tenant_id}/activate", response_model=TenantResponse)
async def activate_tenant(
    tenant_id: UUID,
    current_user: CurrentUser = Depends(require_scopes("tenant:admin")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        tenant = await service.activate_tenant(tenant_id)
        return TenantResponse(**tenant.to_dict())
    except Exception as e:
        raise BadRequestError(str(e))

@router.post("/{tenant_id}/deactivate", response_model=TenantResponse)
async def deactivate_tenant(
    tenant_id: UUID,
    current_user: CurrentUser = Depends(require_scopes("tenant:admin")),
    db: AsyncSession = Depends(get_db)
):
    service = TenantService(db)
    try:
        tenant = await service.deactivate_tenant(tenant_id)
        return TenantResponse(**tenant.to_dict())
    except Exception as e:
        raise BadRequestError(str(e))