"""
Group Management API endpoints (Module 5)
"""
from typing import List, Optional
from uuid import UUID
from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.ext.asyncio import AsyncSession

from ..database import get_db
from ..core.security_utils import get_current_user, require_scopes
from ..services.group_service import GroupService
from ..schemas.group import (
    GroupCreate, GroupUpdate, GroupQuery, GroupResponse,
    GroupListResponse, GroupUserAddRequest, GroupRoleAssignRequest
)
from ..core.exceptions import ValidationError, NotFoundError, ConflictError


router = APIRouter(prefix="/groups", tags=["Group Management"])

# Helper for single scope
require_scope = lambda s: require_scopes(s)


@router.post(
    "/",
    response_model=GroupResponse,
    status_code=status.HTTP_201_CREATED,
    dependencies=[Depends(require_scope("group:admin"))],
    summary="Create a new group"
)
async def create_group(
    group_data: GroupCreate,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> GroupResponse:
    try:
        service = GroupService(db)
        return await service.create_group(
            tenant_id=current_user.tenant_id,
            group_data=group_data,
            created_by=current_user.user_id
        )
    except ValidationError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except ConflictError as e:
        raise HTTPException(status_code=409, detail=str(e))


@router.get(
    "/",
    response_model=GroupListResponse,
    dependencies=[Depends(require_scope("group:read"))],
    summary="List groups"
)
async def list_groups(
    is_active: Optional[bool] = Query(None),
    parent_group_id: Optional[UUID] = Query(None),
    search: Optional[str] = Query(None),
    skip: int = Query(0, ge=0),
    limit: int = Query(50, ge=1, le=100),
    sort_by: str = Query("name"),
    sort_order: str = Query("asc", regex="^(asc|desc)$"),
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> GroupListResponse:
    query = GroupQuery(
        is_active=is_active,
        parent_group_id=parent_group_id,
        search=search,
        skip=skip,
        limit=limit,
        sort_by=sort_by,
        sort_order=sort_order
    )
    service = GroupService(db)
    return await service.list_groups(tenant_id=current_user.tenant_id, query=query)


@router.get(
    "/{group_id}",
    response_model=GroupResponse,
    dependencies=[Depends(require_scope("group:read"))],
    summary="Get group details"
)
async def get_group(
    group_id: UUID,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> GroupResponse:
    try:
        service = GroupService(db)
        return await service.get_group(group_id=group_id, tenant_id=current_user.tenant_id)
    except NotFoundError as e:
        raise HTTPException(status_code=404, detail=str(e))


@router.patch(
    "/{group_id}",
    response_model=GroupResponse,
    dependencies=[Depends(require_scope("group:write"))],
    summary="Update group"
)
async def update_group(
    group_id: UUID,
    group_data: GroupUpdate,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> GroupResponse:
    try:
        service = GroupService(db)
        return await service.update_group(group_id=group_id, tenant_id=current_user.tenant_id, data=group_data)
    except NotFoundError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except ValidationError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except ConflictError as e:
        raise HTTPException(status_code=409, detail=str(e))


@router.delete(
    "/{group_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    dependencies=[Depends(require_scope("group:admin"))],
    summary="Delete (soft) group"
)
async def delete_group(
    group_id: UUID,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    try:
        service = GroupService(db)
        await service.delete_group(group_id=group_id, tenant_id=current_user.tenant_id)
    except NotFoundError as e:
        raise HTTPException(status_code=404, detail=str(e))


@router.post(
    "/{group_id}/users",
    status_code=status.HTTP_201_CREATED,
    dependencies=[Depends(require_scope("group:admin"))],
    summary="Add users to group"
)
async def add_users(
    group_id: UUID,
    payload: GroupUserAddRequest,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> dict:
    service = GroupService(db)
    count = await service.add_users_to_group(group_id=group_id, user_ids=payload.user_ids, tenant_id=current_user.tenant_id, added_by=current_user.user_id)
    return {"added": count}


@router.delete(
    "/{group_id}/users/{user_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    dependencies=[Depends(require_scope("group:admin"))],
    summary="Remove user from group"
)
async def remove_user(
    group_id: UUID,
    user_id: UUID,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    service = GroupService(db)
    await service.remove_user_from_group(group_id=group_id, user_id=user_id, tenant_id=current_user.tenant_id)


@router.get(
    "/{group_id}/users",
    response_model=List[UUID],
    dependencies=[Depends(require_scope("group:read"))],
    summary="List group members (user IDs)"
)
async def list_members(
    group_id: UUID,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> List[UUID]:
    service = GroupService(db)
    return await service.list_group_members(group_id=group_id, tenant_id=current_user.tenant_id)


@router.post(
    "/{group_id}/roles",
    status_code=status.HTTP_201_CREATED,
    dependencies=[Depends(require_scope("group:admin"))],
    summary="Assign roles to group"
)
async def assign_roles(
    group_id: UUID,
    payload: GroupRoleAssignRequest,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> dict:
    service = GroupService(db)
    count = await service.assign_roles_to_group(group_id=group_id, role_ids=payload.role_ids, tenant_id=current_user.tenant_id, granted_by=current_user.user_id)
    return {"assigned": count}


@router.delete(
    "/{group_id}/roles/{role_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    dependencies=[Depends(require_scope("group:admin"))],
    summary="Remove role from group"
)
async def remove_role(
    group_id: UUID,
    role_id: UUID,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    service = GroupService(db)
    await service.remove_role_from_group(group_id=group_id, role_id=role_id, tenant_id=current_user.tenant_id)


@router.get(
    "/{group_id}/roles",
    response_model=List[UUID],
    dependencies=[Depends(require_scope("group:read"))],
    summary="List group roles (role IDs)"
)
async def list_roles(
    group_id: UUID,
    current_user=Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> List[UUID]:
    service = GroupService(db)
    return await service.list_group_roles(group_id=group_id, tenant_id=current_user.tenant_id)

